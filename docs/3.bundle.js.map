{"version":3,"sources":["webpack:///./src/components/main-empty/index.js","webpack:///./src/components/main-empty/main-empty.js","webpack:///./src/components/option/option.js","webpack:///./src/components/option/index.js","webpack:///./src/components/select/select.js","webpack:///./src/components/select/index.js","webpack:///./src/components/city/city.js","webpack:///./src/components/city/index.js","webpack:///./src/components/cities-list/cities-list.js","webpack:///./src/components/cities-list/index.js","webpack:///./src/containers/main-page/main-page.js","webpack:///./src/containers/main-page/index.js"],"names":["MainEmpty","currentCity","className","Option","sortType","name","onSelectOption","isSelected","dispatch","useDispatch","onKeyPress","e","key","KeyCodes","ENTER","ActionCreator","setSortType","onClick","tabIndex","data-value","propTypes","PropTypes","string","isRequired","func","bool","Select","useState","isOpen","setIsOpen","selected","setSelected","nameSelected","setNameSelected","dropdownRef","useRef","buttonRef","useEffect","window","addEventListener","handleOutsideClick","removeEventListener","dropdown","current","contains","target","button","onOptionSelect","action","method","type","ref","width","height","xlinkHref","onKeyDown","ESCAPE","SortOptions","map","option","City","city","changeCity","preventDefault","shortid","require","CitiesList","cities","useSelector","getUniqueCities","getCurrentCity","setCity","generate","Main","this","props","offers","length","classModOffers","classModPrefix","mainClassMod","PureComponent","array","connect","state","getSortedOffers"],"mappings":"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","file":"3.bundle.js","sourcesContent":["import MainEmpty from './main-empty';\n\nexport default MainEmpty;\n","import React from 'react';\n\nconst MainEmpty = ({ currentCity }) => {\n  return (\n    <div className='cities__places-container cities__places-container--empty container'>\n      <section className='cities__no-places'>\n        <div className='cities__status-wrapper tabs__content'>\n          <b className='cities__status'>No places to stay available</b>\n          <p className='cities__status-description'>\n            We could not find any property available at the moment in{' '}\n            {currentCity}\n          </p>\n        </div>\n      </section>\n      <div className='cities__right-section'></div>\n    </div>\n  );\n};\n\nexport default MainEmpty;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { ActionCreator } from '../../redux/reducer/data/actions';\nimport { KeyCodes } from '../../constants';\n\nconst Option = ({ sortType, name, onSelectOption, isSelected }) => {\n  const dispatch = useDispatch();\n\n  const onOptionClick = () => {\n    onSelectOption(sortType, name);\n    dispatch(ActionCreator.setSortType(sortType));\n  };\n\n  const onEnterKeyPress = e => {\n    if (e.key === KeyCodes.ENTER) {\n      onSelectOption(sortType, name);\n      dispatch(ActionCreator.setSortType(sortType));\n    }\n  };\n\n  return (\n    <li\n      className={`${isSelected && `places__option--active`} places__option`}\n      onKeyPress={onEnterKeyPress}\n      onClick={onOptionClick}\n      tabIndex={0}\n      data-value={sortType}\n    >\n      {name}\n    </li>\n  );\n};\n\nOption.propTypes = {\n  sortType: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onSelectOption: PropTypes.func.isRequired,\n  isSelected: PropTypes.bool.isRequired\n};\n\nexport default Option;\n","import Option from './option';\n\nexport default Option;\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport Option from '../option';\nimport { KeyCodes, SortOptions } from '../../constants';\n\nconst Select = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(`popular`);\n  const [nameSelected, setNameSelected] = useState(`Popular`);\n\n  const dropdownRef = useRef();\n  const buttonRef = useRef();\n\n  useEffect(() => {\n    window.addEventListener(`click`, handleOutsideClick);\n    return () => window.removeEventListener(`click`, handleOutsideClick);\n  }, [isOpen]);\n\n  const handleOutsideClick = e => {\n    const dropdown = dropdownRef.current.contains(e.target);\n    const button = buttonRef.current.contains(e.target);\n    if (isOpen && !dropdown && !button) {\n      setIsOpen(false);\n    }\n  };\n\n  const onEnterKeyPress = e => {\n    if (e.key === KeyCodes.ENTER) {\n      setIsOpen(isOpen => !isOpen);\n    }\n  };\n\n  const onEscKeyDown = e => {\n    if (e.key === KeyCodes.ESCAPE) {\n      setIsOpen(false);\n    }\n  };\n\n  const onButtonClick = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  const onOptionSelect = (sortType, name) => {\n    setIsOpen(false);\n    setSelected(sortType);\n    setNameSelected(name);\n  };\n\n  return (\n    <div className='places__sorting' action='#' method='get'>\n      <span className='places__sorting-caption'>Sort by </span>\n      <span\n        type='button'\n        className='places__sorting-type'\n        onClick={onButtonClick}\n        onKeyPress={onEnterKeyPress}\n        tabIndex={0}\n        ref={buttonRef}\n      >\n        {nameSelected}\n        <svg className='places__sorting-arrow' width='7' height='4'>\n          <use xlinkHref='#icon-arrow-select' />\n        </svg>\n      </span>\n      <ul\n        onKeyDown={onEscKeyDown}\n        ref={dropdownRef}\n        className={`${\n          isOpen && `places__options--opened`\n        } places__options places__options--custom`}\n        tabIndex={-1}\n      >\n        {SortOptions.map(option => {\n          return (\n            <Option\n              onSelectOption={onOptionSelect}\n              isSelected={selected === option.isSelected}\n              sortType={option.sortType}\n              name={option.name}\n              button={buttonRef}\n              key={option.sortType}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Select;\n","import Select from './select';\n\nexport default Select;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { KeyCodes } from '../../constants';\n\nconst City = ({ city, currentCity, changeCity }) => {\n  const handleClick = e => {\n    e.preventDefault();\n    changeCity(city);\n  };\n\n  const handleKeyPress = e => {\n    e.preventDefault();\n    if (e.key === KeyCodes.ENTER) {\n      changeCity(city);\n    }\n  };\n\n  return (\n    <li className='locations__item'>\n      <a\n        className={`locations__item-link tabs__item ${\n          currentCity === city ? `tabs__item--active` : ``\n        }`}\n        onClick={handleClick}\n        tabIndex={0}\n        onKeyPress={handleKeyPress}\n      >\n        <span>{city}</span>\n      </a>\n    </li>\n  );\n};\n\nCity.propTypes = {\n  city: PropTypes.string.isRequired,\n  changeCity: PropTypes.func.isRequired,\n  currentCity: PropTypes.string.isRequired\n};\n\nexport default City;\n","import City from './city';\n\nexport default City;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nconst shortid = require('shortid');\n\nimport {\n  getUniqueCities,\n  getCurrentCity\n} from '../../redux/reducer/data/selectors';\nimport { ActionCreator } from '../../redux/reducer/data/actions';\nimport City from '../city';\n\nconst CitiesList = () => {\n  const dispatch = useDispatch();\n  const cities = useSelector(getUniqueCities);\n  const currentCity = useSelector(getCurrentCity);\n\n  const changeCity = city => {\n    dispatch(ActionCreator.setCity(city));\n  };\n\n  return (\n    <section className='locations container'>\n      <ul className='locations__list tabs__list'>\n        {cities.map(city => (\n          <City\n            key={shortid.generate()}\n            city={city}\n            changeCity={changeCity}\n            currentCity={currentCity}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default CitiesList;\n","import CitiesList from './cities-list';\n\nexport default CitiesList;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  getCurrentCity,\n  getSortedOffers\n} from '../../redux/reducer/data/selectors';\nimport Map from '../../components/map';\nimport Header from '../../components/header';\nimport MainEmpty from '../../components/main-empty';\nimport Select from '../../components/select';\nimport OffersList from '../../components/offers-list';\nimport CitiesList from '../../components/cities-list';\n\nclass Main extends PureComponent {\n  static propTypes = {\n    offers: PropTypes.array.isRequired,\n    currentCity: PropTypes.string.isRequired\n  };\n\n  render() {\n    const { currentCity, offers } = this.props;\n\n    return (\n      <div className='page page--gray page--main'>\n        <Header />\n        <main className='page__main page__main--index'>\n          <h1 className='visually-hidden'>Cities</h1>\n          <div className='tabs'>\n            <CitiesList />\n          </div>\n          <div className='cities'>\n            {!offers.length ? (\n              <MainEmpty currentCity={currentCity} />\n            ) : (\n              <div className='cities__places-container container'>\n                <section className='cities__places places'>\n                  <h2 className='visually-hidden'>Places</h2>\n                  <b className='places__found'>\n                    {offers.length} places to stay in {currentCity}\n                  </b>\n                  <Select />\n                  <OffersList\n                    offers={offers}\n                    classModOffers={[`cities__places-list`, `tabs__content`]}\n                    classModPrefix={`cities`}\n                    mainClassMod={`cities__place-card`}\n                  />\n                </section>\n                <div className='cities__right-section'>\n                  <section className='cities__map map'>\n                    <Map offers={offers} />\n                  </section>\n                </div>\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentCity: getCurrentCity(state),\n  offers: getSortedOffers(state)\n});\n\nexport default connect(mapStateToProps)(Main);\n","import Main from './main-page';\nexport default Main;\n"],"sourceRoot":""}